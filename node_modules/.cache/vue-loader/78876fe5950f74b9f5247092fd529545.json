{"remainingRequest":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\vue-document-editor\\src\\DocumentEditor\\DocumentEditor.vue?vue&type=template&id=448921d6&scoped=true","dependencies":[{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\vue-document-editor\\src\\DocumentEditor\\DocumentEditor.vue","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiBjbGFzcz0iZWRpdG9yIiByZWY9ImVkaXRvciI+CgogICAgPCEtLSBQYWdlIG92ZXJsYXlzIChoZWFkZXJzLCBmb290ZXJzLCBwYWdlIG51bWJlcnMsIC4uLikgLS0+CiAgICA8ZGl2IHYtaWY9Im92ZXJsYXkiIGNsYXNzPSJvdmVybGF5cyIgcmVmPSJvdmVybGF5cyI+CiAgICAgIDxkaXYgdi1mb3I9IihwYWdlLCBwYWdlX2lkeCkgaW4gcGFnZXMiIGNsYXNzPSJvdmVybGF5IiA6a2V5PSJwYWdlLnV1aWQrJy1vdmVybGF5JyIgOnJlZj0iKGVsdCkgPT4gKHBhZ2VzX292ZXJsYXlfcmVmc1twYWdlLnV1aWRdID0gZWx0KSIKICAgICAgICB2LWh0bWw9Im92ZXJsYXkocGFnZV9pZHgrMSwgcGFnZXMubGVuZ3RoKSIgOnN0eWxlPSJwYWdlX3N0eWxlKHBhZ2VfaWR4LCBmYWxzZSkiPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDwhLS0gRG9jdW1lbnQgZWRpdG9yIC0tPgogICAgPGRpdiBjbGFzcz0iY29udGVudCIgcmVmPSJjb250ZW50IiA6Y29udGVudGVkaXRhYmxlPSJlZGl0YWJsZSIgOnN0eWxlPSJwYWdlX3N0eWxlKC0xKSIgQGlucHV0PSJpbnB1dCIgQGtleXVwPSJwcm9jZXNzX2N1cnJlbnRfdGV4dF9zdHlsZSIgQGtleWRvd249ImtleWRvd24iPgogICAgICA8IS0tIFRoaXMgaXMgYSBWdWUgImhvaXN0ZWQiIHN0YXRpYyA8ZGl2PiB3aGljaCBjb250YWlucyBldmVyeSBwYWdlIG9mIHRoZSBkb2N1bWVudCBhbmQgY2FuIGJlIG1vZGlmaWVkIGJ5IHRoZSBET00gLS0+CiAgICA8L2Rpdj4KCiAgICA8IS0tIEl0ZW1zIHJlbGF0ZWQgdG8gdGhlIGRvY3VtZW50IGVkaXRvciAod2lkZ2V0cywgLi4uKSBjYW4gYmUgaW5zZXJ0ZWQgaGVyZSAtLT4KCiAgPC9kaXY+Cg=="},{"version":3,"sources":["F:\\SVN PROJECTS\\ERP_Hospital_Client\\trunk\\node_modules\\vue-document-editor\\src\\DocumentEditor\\DocumentEditor.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjrI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjF,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACvvH,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;;EAElF,CAAC,CAAC,CAAC,CAAC,CAAC","file":"F:/SVN PROJECTS/ERP_Hospital_Client/trunk/node_modules/vue-document-editor/src/DocumentEditor/DocumentEditor.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"editor\" ref=\"editor\">\n\n    <!-- Page overlays (headers, footers, page numbers, ...) -->\n    <div v-if=\"overlay\" class=\"overlays\" ref=\"overlays\">\n      <div v-for=\"(page, page_idx) in pages\" class=\"overlay\" :key=\"page.uuid+'-overlay'\" :ref=\"(elt) => (pages_overlay_refs[page.uuid] = elt)\"\n        v-html=\"overlay(page_idx+1, pages.length)\" :style=\"page_style(page_idx, false)\">\n      </div>\n    </div>\n\n    <!-- Document editor -->\n    <div class=\"content\" ref=\"content\" :contenteditable=\"editable\" :style=\"page_style(-1)\" @input=\"input\" @keyup=\"process_current_text_style\" @keydown=\"keydown\">\n      <!-- This is a Vue \"hoisted\" static <div> which contains every page of the document and can be modified by the DOM -->\n    </div>\n\n    <!-- Items related to the document editor (widgets, ...) can be inserted here -->\n\n  </div>\n</template>\n\n<script>\nimport { defineCustomElement } from 'vue';\nimport { move_children_forward_recursively, move_children_backwards_with_merging } from './imports/page-transition-mgmt.js';\n\nexport default {\n\n  props: {\n    // This contains the initial content of the document that can be synced\n    // It must be an Array: each array item is a new set of pages containing the\n    // item (string or component). You can see that as predefined page breaks.\n    // See the Demo.vue file for a good usage example.\n    content: {\n      type: Array,\n      required: true\n    },\n\n    // Display mode of the pages\n    display: {\n      type: String,\n      default: \"grid\" // [\"grid\", \"horizontal\", \"vertical\"]\n    },\n\n    // Sets whether document text can be modified\n    editable: {\n      type: Boolean,\n      default: true\n    },\n\n    // Overlay function returning page headers and footers in HTML\n    overlay: Function,\n\n    // Pages format in mm (should be an array containing [width, height])\n    page_format_mm: {\n      type: Array,\n      default: () => [210, 297]\n    },\n\n    // Page margins in CSS\n    page_margins: {\n      type: [String, Function],\n      default: \"10mm 15mm\"\n    },\n\n    // Display zoom. Only acts on the screen display\n    zoom: {\n      type: Number,\n      default: 1.0\n    }\n  },\n\n  data () {\n    return {\n      pages: [], // contains {uuid, content_idx, prev_html, template, props, elt} for each pages of the document\n      pages_overlay_refs: {}, // contains page overlay ref elements indexed by uuid\n      pages_height: 0, // real measured page height in px (corresponding to page_format_mm[1])\n      editor_width: 0, // real measured with of an empty editor <div> in px\n      prevent_next_content_update_from_parent: false, // workaround to avoid infinite update loop\n      current_text_style: false, // contains the style at caret position\n      printing_mode: false, // flag set when page is rendering in printing mode\n    }\n  },\n\n  mounted () {\n    this.update_editor_width();\n    this.update_css_media_style();\n    this.reset_content();\n    window.addEventListener(\"resize\", this.update_editor_width);\n    window.addEventListener(\"click\", this.process_current_text_style);\n    window.addEventListener(\"beforeprint\", this.before_print);\n    window.addEventListener(\"afterprint\", this.after_print);\n  },\n\n  beforeUpdate () {\n    this.pages_overlay_refs = [];\n  },\n\n  beforeUnmount () {\n    window.removeEventListener(\"resize\", this.update_editor_width);\n    window.removeEventListener(\"click\", this.process_current_text_style);\n    window.removeEventListener(\"beforeprint\", this.before_print);\n    window.removeEventListener(\"afterprint\", this.after_print);\n  },\n\n  computed: {\n    css_media_style () { // creates a CSS <style> and returns it\n      const style = document.createElement(\"style\");\n      document.head.appendChild(style);\n      return style;\n    }\n  },\n\n\n  methods: {\n    // Computes a random 5-char UUID\n    new_uuid: () => Math.random().toString(36).slice(-5),\n\n    // Resets all content from the content property\n    reset_content () {\n      // Prevent launching this function multiple times\n      if(this.reset_in_progress) return;\n      this.reset_in_progress = true;\n\n      // If provided content is empty, initialize it first and exit\n      if(!this.content.length) {\n        this.reset_in_progress = false;\n        this.$emit(\"update:content\", [\"\"]);\n        return;\n      }\n\n      // Delete all pages and set one new page per content item\n      this.pages = this.content.map((content, content_idx) => ({\n        uuid: this.new_uuid(),\n        content_idx,\n        template: content.template,\n        props: content.props\n      }));\n      this.update_pages_elts();\n\n      // Get page height from first empty page\n      const first_page_elt = this.pages[0].elt;\n      if(!this.$refs.content.contains(first_page_elt)) this.$refs.content.appendChild(first_page_elt); // restore page in DOM in case it was removed\n      this.pages_height = first_page_elt.clientHeight + 1; // allow one pixel precision\n\n      // Initialize text pages\n      for(const page of this.pages) {\n\n        // set raw HTML content\n        if(!this.content[page.content_idx]) page.elt.innerHTML = \"<div><br></div>\";\n        else if(typeof this.content[page.content_idx] == \"string\") page.elt.innerHTML = \"<div>\"+this.content[page.content_idx]+\"</div>\";\n        else if(page.template) {\n          const componentElement = defineCustomElement(page.template);\n          customElements.define('component-'+page.uuid, componentElement);\n          page.elt.appendChild(new componentElement({ modelValue: page.props }));\n        }\n\n        // restore page in DOM in case it was removed\n        if(!this.$refs.content.contains(page.elt)) this.$refs.content.appendChild(page.elt);\n      }\n\n      // Spread content over several pages if it overflows\n      this.fit_content_over_pages();\n\n      // Remove the text cursor from the content, if any (its position is lost anyway)\n      this.$refs.content.blur();\n\n      // Clear \"reset in progress\" flag\n      this.reset_in_progress = false;\n    },\n\n    // Spreads the HTML content over several pages until it fits\n    fit_content_over_pages () {\n      // Data variable this.pages_height must have been set before calling this function\n      if(!this.pages_height) return;\n\n      // Prevent launching this function multiple times\n      if(this.fit_in_progress) return;\n      this.fit_in_progress = true;\n\n      // Check pages that were deleted from the DOM (start from the end)\n      for(let page_idx = this.pages.length - 1; page_idx >= 0; page_idx--) {\n        const page = this.pages[page_idx];\n\n        // if user deleted the page from the DOM, then remove it from this.pages array\n        if(!page.elt || !document.body.contains(page.elt)) this.pages.splice(page_idx, 1);\n      }\n\n      // If all the document was wiped out, start a new empty document\n      if(!this.pages.length){\n        this.$emit(\"update:content\", [\"\"]);\n        return;\n      }\n\n      // Save current selection (or cursor position) by inserting empty HTML elements at the start and the end of it\n      const selection = window.getSelection();\n      const start_marker = document.createElement(\"null\");\n      const end_marker = document.createElement(\"null\");\n      // don't insert markers in case selection fails (if we are editing in components in the shadow-root it selects the page <div> as anchorNode)\n      if(selection && selection.rangeCount && selection.anchorNode && !(selection.anchorNode.dataset && selection.anchorNode.dataset.isVDEPage != null)) {\n        const range = selection.getRangeAt(0);\n        range.insertNode(start_marker);\n        range.collapse(false);\n        range.insertNode(end_marker);\n      }\n\n      // Browse every remaining page\n      let prev_page_modified_flag = false;\n      for(let page_idx = 0; page_idx < this.pages.length; page_idx++) { // page length can grow inside this loop\n        const page = this.pages[page_idx];\n        let next_page = this.pages[page_idx + 1];\n        let next_page_elt = next_page ? next_page.elt : null;\n\n        // check if this page, the next page, or any previous page content has been modified by the user (don't apply to template pages)\n        if(!page.template && (prev_page_modified_flag || page.elt.innerHTML != page.prev_innerHTML\n          || (next_page_elt && !next_page.template && next_page_elt.innerHTML != next_page.prev_innerHTML))){\n          prev_page_modified_flag = true;\n\n          // BACKWARD-PROPAGATION\n          // check if content doesn't overflow, and that next page exists and has the same content_idx\n          if(page.elt.clientHeight <= this.pages_height && next_page && next_page.content_idx == page.content_idx) {\n\n            // try to append every node from the next page until it doesn't fit\n            move_children_backwards_with_merging(page.elt, next_page_elt, () => !next_page_elt.childNodes.length || (page.elt.clientHeight > this.pages_height));\n          }\n\n          // FORWARD-PROPAGATION\n          // check if content overflows\n          if(page.elt.clientHeight > this.pages_height) {\n\n            // if there is no next page for the same content, create it\n            if(!next_page || next_page.content_idx != page.content_idx) {\n              next_page = { uuid: this.new_uuid(), content_idx: page.content_idx };\n              this.pages.splice(page_idx + 1, 0, next_page);\n              this.update_pages_elts();\n              next_page_elt = next_page.elt;\n            }\n\n            // move the content step by step to the next page, until it fits\n            move_children_forward_recursively(page.elt, next_page_elt, () => (page.elt.clientHeight <= this.pages_height));\n          }\n\n          // CLEANING\n          // remove next page if it is empty\n          if(next_page_elt && next_page.content_idx == page.content_idx && !next_page_elt.childNodes.length) {\n            this.pages.splice(page_idx + 1, 1);\n          }\n        }\n\n        // update pages in the DOM\n        this.update_pages_elts();\n      }\n      \n\n      // Restore selection and remove empty elements\n      if(document.body.contains(start_marker)){\n        const range = document.createRange();\n        range.setStart(start_marker, 0);\n        if(document.body.contains(end_marker)) range.setEnd(end_marker, 0);\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n      if(start_marker.parentElement) start_marker.parentElement.removeChild(start_marker);\n      if(end_marker.parentElement) end_marker.parentElement.removeChild(end_marker);\n\n      // Normalize and store current page HTML content\n      for(const page of this.pages) {\n        if(!page.template) page.elt.normalize(); // normalize HTML (merge text nodes) - don't touch template pages or it can break Vue\n        page.prev_innerHTML = page.elt.innerHTML; // store current pages innerHTML for next call\n      }\n\n      // Clear \"fit in progress\" flag\n      this.fit_in_progress = false;\n    },\n\n    // Input event\n    input (e) {\n      if(!e) return; // check that event is set\n      this.fit_content_over_pages(); // fit content according to modifications\n      this.emit_new_content(); // emit content modification\n      if(e.inputType != \"insertText\") this.process_current_text_style(); // update current style if it has changed\n    },\n\n    // Keydown event\n    keydown (e) {\n      // if the document is empty, prevent removing the first page container with a backspace input (keycode 8)\n      // which is now the default behavior for web browsers\n      if(e.keyCode == 8 && this.content.length <= 1) {\n        const is_text = (this.content[0] && typeof(this.content[0]) == \"string\") ? this.content[0].replace(/<\\w+(\\s+(\"[^\"]*\"|'[^']*'|[^>])+)?>|<\\/\\w+>/gi, '') : false;\n        if(!is_text) e.preventDefault();\n      }\n    },\n\n    // Emit content change to parent\n    emit_new_content () {\n      let removed_pages_flag = false; // flag to call reset_content if some pages were removed by the user\n\n      // process the new content\n      const new_content = this.content.map((item, content_idx) => {\n        // select pages that correspond to this content item (represented by its index in the array)\n        const pages = this.pages.filter(page => (page.content_idx == content_idx));\n\n        // if there are no pages representing this content (because deleted by the user), mark item as false to remove it\n        if(!pages.length) {\n          removed_pages_flag = true;\n          return false;\n        }\n        // if item is a string, concatenate each page content and set that\n        else if(typeof item == \"string\") {\n          return pages.map(page => {\n            // remove any useless <div> surrounding the content\n            let elt = page.elt;\n            while(elt.children.length == 1 && elt.firstChild.tagName && elt.firstChild.tagName.toLowerCase() == \"div\" && !elt.firstChild.getAttribute(\"style\")) {\n              elt = elt.firstChild;\n            }\n            return elt.innerHTML;\n          }).join('') || false;\n        }\n        // if item is a component, just clone the item\n        else return { template: item.template, props: { ...item.props }};\n      }).filter(item => (item != false)); // remove empty items\n\n      // avoid calling reset_content after the parent content is updated (infinite loop)\n      if(!removed_pages_flag) this.prevent_next_content_update_from_parent = true;\n\n      // send event to parent to update the synced content\n      this.$emit(\"update:content\", new_content);\n    },\n\n    // Sets current_text_style with CSS style at caret position\n    process_current_text_style () {\n      let style = false;\n      const sel = window.getSelection();\n      if(sel.focusNode) {\n        const element = sel.focusNode.tagName ? sel.focusNode : sel.focusNode.parentElement;\n        if(element && element.isContentEditable) {\n          style = window.getComputedStyle(element);\n\n          // compute additional properties\n          style.textDecorationStack = []; // array of text-decoration strings from parent elements\n          style.headerLevel = 0;\n          style.isList = false;\n          let parent = element;\n          while(parent){\n            const parent_style = window.getComputedStyle(parent);\n            // stack CSS text-decoration as it is not overridden by children\n            style.textDecorationStack.push(parent_style.textDecoration);\n            // check if one parent is a list-item\n            if(parent_style.display == \"list-item\") style.isList = true;\n            // get first header level, if any\n            if(!style.headerLevel){\n              for(let i = 1; i <= 6; i++){\n                if(parent.tagName.toUpperCase() == \"H\"+i) {\n                  style.headerLevel = i;\n                  break;\n                }\n              }\n            }\n            parent = parent.parentElement;\n          }\n        }\n      }\n      this.current_text_style = style;\n    },\n\n    // Process the specific style (position and size) of each page <div> and content <div>\n    page_style (page_idx, allow_overflow) {\n      const px_in_mm = 0.2645833333333;\n      const page_width = this.page_format_mm[0] / px_in_mm;\n      const page_spacing_mm = 10;\n      const page_with_plus_spacing = (page_spacing_mm + this.page_format_mm[0]) * this.zoom / px_in_mm;\n      const view_padding = 20;\n      const inner_width = this.editor_width - 2 * view_padding;\n      let nb_pages_x = 1, page_column, x_pos, x_ofx, left_px, top_mm, bkg_width_mm, bkg_height_mm;\n      if(this.display == \"horizontal\") {\n        if(inner_width > (this.pages.length * page_with_plus_spacing)){\n          nb_pages_x = Math.floor(inner_width / page_with_plus_spacing);\n          left_px = inner_width / (nb_pages_x * 2) * (1 + page_idx * 2) - page_width / 2;\n        } else {\n          nb_pages_x = this.pages.length;\n          left_px = page_with_plus_spacing * page_idx + page_width / 2 * (this.zoom - 1);\n        }\n        top_mm = 0;\n        bkg_width_mm = this.zoom * (this.page_format_mm[0] * nb_pages_x + (nb_pages_x - 1) * page_spacing_mm);\n        bkg_height_mm = this.page_format_mm[1] * this.zoom;\n      } else { // \"grid\", vertical\n        nb_pages_x = Math.floor(inner_width / page_with_plus_spacing);\n        if(nb_pages_x < 1 || this.display == \"vertical\") nb_pages_x = 1;\n        page_column = (page_idx % nb_pages_x);\n        x_pos = inner_width / (nb_pages_x * 2) * (1 + page_column * 2) - page_width / 2;\n        x_ofx = Math.max(0, (page_width * this.zoom - inner_width) / 2);\n        left_px = x_pos + x_ofx;\n        top_mm = ((this.page_format_mm[1] + page_spacing_mm) * this.zoom) * Math.floor(page_idx / nb_pages_x);\n        const nb_pages_y = Math.ceil(this.pages.length / nb_pages_x);\n        bkg_width_mm = this.zoom * (this.page_format_mm[0] * nb_pages_x + (nb_pages_x - 1) * page_spacing_mm);\n        bkg_height_mm = this.zoom * (this.page_format_mm[1] * nb_pages_y + (nb_pages_y - 1) * page_spacing_mm);\n      }\n      if(page_idx >= 0) {\n        const style = {\n          position: \"absolute\",\n          left: \"calc(\"+ left_px +\"px + \"+ view_padding +\"px)\",\n          top: \"calc(\"+ top_mm +\"mm + \"+ view_padding +\"px)\",\n          width: this.page_format_mm[0]+\"mm\",\n          // \"height\" is set below\n          padding: (typeof this.page_margins == \"function\") ? this.page_margins(page_idx + 1, this.pages.length) : this.page_margins,\n          transform: \"scale(\"+ this.zoom +\")\"\n        };\n        style[allow_overflow ? \"minHeight\" : \"height\"] = this.page_format_mm[1]+\"mm\";\n        return style;\n      } else {\n        // Content/background <div> is sized so it lets a margin around pages when scrolling at the end\n        return { width: \"calc(\"+ bkg_width_mm +\"mm + \"+ (2*view_padding) +\"px)\", height: \"calc(\"+ bkg_height_mm +\"mm + \"+ (2*view_padding) +\"px)\" };\n      }\n    },\n\n    // Utility to convert page_style to CSS string\n    css_to_string: (css) => Object.entries(css).map(([k, v]) => k.replace(/[A-Z]/g, match => (\"-\"+match.toLowerCase()))+\":\"+v).join(';'),\n\n    // Update pages <div> from this.pages data\n    update_pages_elts () {\n      // Removing deleted pages\n      for(const page_elt of this.$refs.content.children) {\n        if(!this.pages.find(page => (page.elt == page_elt))) page_elt.remove();\n      }\n\n      // Adding / updating pages\n      for(const [page_idx, page] of this.pages.entries()) {\n        // Get either existing page_elt or create it\n        if(!page.elt) {\n          page.elt = document.createElement(\"div\");\n          page.elt.className = \"page\";\n          page.elt.dataset.isVDEPage = \"\";\n          const next_page = this.pages[page_idx + 1];\n          this.$refs.content.insertBefore(page.elt, next_page ? next_page.elt : null);\n        }\n        // Update page properties\n        page.elt.dataset.contentIdx = page.content_idx;\n        if(!this.printing_mode) page.elt.style = Object.entries(this.page_style(page_idx, page.template ? false : true)).map(([k, v]) => k.replace(/[A-Z]/g, match => (\"-\"+match.toLowerCase()))+\":\"+v).join(';'); // (convert page_style to CSS string)\n        page.elt.contentEditable = (this.editable && !page.template) ? true : false;\n      }\n    },\n\n    // Get and store empty editor <div> width\n    update_editor_width () {\n      this.$refs.editor.classList.add(\"hide_children\");\n      this.editor_width = this.$refs.editor.clientWidth;\n      this.update_pages_elts();\n      this.$refs.editor.classList.remove(\"hide_children\");\n    },\n    update_css_media_style () {\n      this.css_media_style.innerHTML = \"@media print { @page { size: \"+this.page_format_mm[0]+\"mm \"+this.page_format_mm[1]+\"mm; margin: 0 !important; } .hidden-print { display: none !important; } }\";\n    },\n\n    // Prepare content before opening the native print box\n    before_print () {\n      // set the printing mode flag\n      this.printing_mode = true;\n\n      // store the current body aside\n      this._page_body = document.body;\n\n      // create a new body for the print and overwrite CSS\n      const print_body = document.createElement(\"body\");\n      print_body.style.margin = \"0\";\n      print_body.style.padding = \"0\";\n      print_body.style.background = \"white\";\n      print_body.style.font = window.getComputedStyle(this.$refs.editor).font;\n      print_body.className = this.$refs.editor.className;\n\n      // move each page to the print body\n      for(const [page_idx, page] of this.pages.entries()){\n        //const page_clone = page_elt.cloneNode(true);\n        page.elt.style = \"\"; // reset page style for the clone\n        page.elt.style.position = \"relative\";\n        page.elt.style.padding = (typeof this.page_margins == \"function\") ? this.page_margins(page_idx + 1, this.pages.length) : this.page_margins;\n        page.elt.style.breakBefore = page_idx ? \"page\" : \"auto\";\n\n        // add overlays if any\n        const overlay_elt = this.pages_overlay_refs[page.uuid];\n        if(overlay_elt){\n          overlay_elt.style.position = \"absolute\";\n          overlay_elt.style.left = \"0\";\n          overlay_elt.style.top = \"0\";\n          overlay_elt.style.transform = \"none\";\n          overlay_elt.style.padding = \"0\";\n          overlay_elt.style.overflow = \"hidden\";\n          page.elt.prepend(overlay_elt);\n        }\n        \n        print_body.append(page.elt);\n      }\n\n      // display a return arrow to let the user restore the original body in case the navigator doesn't call after_print() (it happens sometimes in Chrome)\n      const return_overlay = document.createElement(\"div\");\n      return_overlay.className = \"hidden-print\"; // css managed in update_css_media_style method\n      return_overlay.style.position = \"fixed\";\n      return_overlay.style.left = \"0\";\n      return_overlay.style.top = \"0\";\n      return_overlay.style.right = \"0\";\n      return_overlay.style.bottom = \"0\";\n      return_overlay.style.display = \"flex\";\n      return_overlay.style.alignItems = \"center\";\n      return_overlay.style.justifyContent = \"center\";\n      return_overlay.style.background = \"rgba(255, 255, 255, 0.95)\";\n      return_overlay.style.cursor = \"pointer\";\n      return_overlay.innerHTML = '<svg width=\"220\" height=\"220\"><path fill=\"rgba(0, 0, 0, 0.7)\" d=\"M120.774,179.271v40c47.303,0,85.784-38.482,85.784-85.785c0-47.3-38.481-85.782-85.784-85.782H89.282L108.7,28.286L80.417,0L12.713,67.703l67.703,67.701l28.283-28.284L89.282,87.703h31.492c25.246,0,45.784,20.538,45.784,45.783C166.558,158.73,146.02,179.271,120.774,179.271z\"/></svg>'\n      return_overlay.addEventListener(\"click\", this.after_print);\n      print_body.append(return_overlay);\n\n      // replace current body by the print body\n      document.body = print_body;\n    },\n\n    // Restore content after closing the native print box\n    after_print () {\n      // clear the printing mode flag\n      this.printing_mode = false;\n\n      // restore pages and overlays\n      for(const [page_idx, page] of this.pages.entries()){\n        page.elt.style = this.css_to_string(this.page_style(page_idx, page.template ? false : true));\n        this.$refs.content.append(page.elt);\n        const overlay_elt = this.pages_overlay_refs[page.uuid];\n        if(overlay_elt) {\n          overlay_elt.style = this.css_to_string(this.page_style(page_idx, false));\n          this.$refs.overlays.append(overlay_elt);\n        }\n      }\n      document.body = this._page_body;\n\n      // recompute editor with and reposition elements\n      this.update_editor_width();\n    }\n  },\n\n  // Watch for changes and adapt content accordingly\n  watch: {\n    content: {\n      handler () {\n        // prevent infinite loop as reset_content triggers a content update and it's async\n        if(this.prevent_next_content_update_from_parent) {\n          this.prevent_next_content_update_from_parent = false;\n        } else this.reset_content();\n      },\n      deep: true\n    },\n    display: {\n      handler () { this.update_pages_elts(); }\n    },\n    page_format_mm: {\n      handler () {\n        this.update_css_media_style();\n        this.reset_content();\n      }\n    },\n    page_margins: {\n      handler () {\n        this.reset_content();\n      }\n    },\n    zoom: {\n      handler () { this.update_pages_elts(); }\n    }\n  }\n\n}\n</script>\n\n<style>\nbody {\n  /* Enable printing of background colors */\n  -webkit-print-color-adjust: exact;\n  print-color-adjust: exact;\n}\n</style>\n<style scoped>\n.editor {\n  display: block;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  cursor: default;\n}\n.editor ::-webkit-scrollbar {\n  width: 16px;\n  height: 16px;\n}\n.editor ::-webkit-scrollbar-track,\n.editor ::-webkit-scrollbar-corner {\n  display: none;\n}\n.editor ::-webkit-scrollbar-thumb {\n  background-color: rgba(0, 0, 0, 0.5);\n  border: 5px solid transparent;\n  border-radius: 16px;\n  background-clip: content-box;\n}\n.editor ::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.editor .hide_children > * {\n  display: none;\n}\n.editor > .content {\n  position: relative;\n  outline: none;\n  margin: 0;\n  padding: 0;\n  min-width: 100%;\n  pointer-events: none;\n}\n.editor > .content > :deep(.page) {\n  position: absolute;\n  box-sizing: border-box;\n  left: 50%;\n  transform-origin: center top;\n  background: var(--page-background, white);\n  box-shadow: var(--page-box-shadow, 0 1px 3px 1px rgba(60, 64, 67, 0.15));\n  border: var(--page-border);\n  border-radius: var(--page-border-radius);\n  transition: left 0.3s, top 0.3s;\n  overflow: hidden;\n  pointer-events: all;\n}\n.editor > .content[contenteditable],\n.editor > .content :deep(*[contenteditable]) {\n  cursor: text;\n}\n.editor > .content :deep(*[contenteditable=false]) {\n  cursor: default;\n}\n.editor > .overlays {\n  position: relative;\n  margin: 0;\n  padding: 0;\n  min-width: 100%;\n  pointer-events: none;\n}\n.editor > .overlays > .overlay {\n  position: absolute;\n  box-sizing: border-box;\n  left: 50%;\n  transform-origin: center top;\n  transition: left 0.3s, top 0.3s;\n  overflow: hidden;\n  z-index: 1;\n}\n</style>"]}]}