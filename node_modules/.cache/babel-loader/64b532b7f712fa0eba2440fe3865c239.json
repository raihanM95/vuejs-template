{"remainingRequest":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\babel-loader\\lib\\index.js!F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\vue-tinymce-editor\\src\\components\\TinymceVue.vue?vue&type=template&id=22060ee2&scoped=true","dependencies":[{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\vue-tinymce-editor\\src\\components\\TinymceVue.vue","mtime":1519421050000},{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LTIyMDYwZWUyIik7CgpleHBvcnQgdmFyIHJlbmRlciA9IC8qI19fUFVSRV9fKi9fd2l0aElkKGZ1bmN0aW9uIChfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIG51bGwsIFtfY3JlYXRlVk5vZGUoInRleHRhcmVhIiwgewogICAgaWQ6ICRwcm9wcy5pZAogIH0sIF90b0Rpc3BsYXlTdHJpbmcoJGRhdGEuY29udGVudCksIDkKICAvKiBURVhULCBQUk9QUyAqLwogICwgWyJpZCJdKV0pOwp9KTs="},{"version":3,"sources":["F:\\SVN PROJECTS\\DiagnosticCenterManagement_Client\\trunk\\node_modules\\vue-tinymce-editor\\src\\components\\TinymceVue.vue"],"names":[],"mappings":";;;;;uBACE,YAAA,CAEM,KAFN,EAEM,IAFN,EAEM,CADF,YAAA,CAA2C,UAA3C,EAA2C;AAAhC,IAAA,EAAE,EAAE,MAAA,CAAA;AAA4B,GAA3C,EAAiB,gBAAA,CAAK,KAAA,CAAA,OAAL,CAAjB,EAA6B;AAAA;AAA7B,IAA6B,CAAA,IAAA,CAA7B,CACE,CAFN,C","sourcesContent":["<template>\n  <div>\n      <textarea :id=\"id\">{{ content }}</textarea>\n  </div>\n</template>\n\n<script>\n   // Import TinyMCE\n    import tinymce from 'tinymce/tinymce';\n\n    // A theme is also required\n    import 'tinymce/themes/modern/theme';\n\n    // Any plugins you want to use has to be imported\n    import 'tinymce/plugins/advlist';\n    import 'tinymce/plugins/wordcount';\n    import 'tinymce/plugins/autolink';\n    import 'tinymce/plugins/autosave';\n    import 'tinymce/plugins/charmap';\n    import 'tinymce/plugins/codesample';\n    import 'tinymce/plugins/contextmenu';\n    import 'tinymce/plugins/emoticons';\n    import 'tinymce/plugins/fullscreen';\n    import 'tinymce/plugins/hr';\n    import 'tinymce/plugins/imagetools';\n    import 'tinymce/plugins/insertdatetime';\n    import 'tinymce/plugins/link';\n    import 'tinymce/plugins/media';\n    import 'tinymce/plugins/noneditable';\n    import 'tinymce/plugins/paste';\n    import 'tinymce/plugins/print';\n    import 'tinymce/plugins/searchreplace';\n    import 'tinymce/plugins/tabfocus';\n    import 'tinymce/plugins/template';\n    import 'tinymce/plugins/textpattern';\n    import 'tinymce/plugins/visualblocks';\n    import 'tinymce/plugins/anchor';\n    import 'tinymce/plugins/autoresize';\n    import 'tinymce/plugins/bbcode';\n    import 'tinymce/plugins/code';\n    import 'tinymce/plugins/colorpicker';\n    import 'tinymce/plugins/directionality';\n    import 'tinymce/plugins/fullpage';\n    import 'tinymce/plugins/help';\n    import 'tinymce/plugins/image';\n    import 'tinymce/plugins/importcss';\n    import 'tinymce/plugins/legacyoutput';\n    import 'tinymce/plugins/lists';\n    import 'tinymce/plugins/nonbreaking';\n    import 'tinymce/plugins/pagebreak';\n    import 'tinymce/plugins/preview';\n    import 'tinymce/plugins/save';\n    import 'tinymce/plugins/spellchecker';\n    import 'tinymce/plugins/table';\n    import 'tinymce/plugins/textcolor';\n    import 'tinymce/plugins/toc';\n    import 'tinymce/plugins/visualchars';\n    \n    import 'tinymce/skins/lightgray/skin.min.css'\n   \n    export default {\n        name: 'tinymce',\n        props: { \n                id : {\n                    type : String,\n                    required : true\n                },\n                htmlClass : { default : '', type : String},\n                value : { default : '' },\n                plugins : { default : function(){ \n                                    return [\n                                        'advlist autolink lists link image charmap print preview hr anchor pagebreak',\n                                        'searchreplace wordcount visualblocks visualchars code fullscreen',\n                                        'insertdatetime media nonbreaking save table contextmenu directionality',\n                                        'template paste textcolor colorpicker textpattern imagetools toc help emoticons hr codesample'\n                                    ];\n                                } , type: Array\n                            },\n                toolbar1: { default :'formatselect | bold italic  strikethrough  forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat', type: String},\n                toolbar2: { default : '', type: String },\n                other_options: { default : function() { return {}; }, type: Object},\n                readonly: { default: false, type: Boolean }\n        },\n        data(){\n            return {\n                content : '',\n                editor : null,\n                cTinyMce : null,\n                checkerTimeout: null,\n                isTyping : false\n            }; \n        },\n        mounted(){\n            this.content = this.value;\n            this.init();  \n        },\n        beforeDestroy () {\n            this.editor.destroy();\n        },\n        watch: {\n            value : function (newValue){\n                if(!this.isTyping){\n                    if(this.editor !== null)\n                        this.editor.setContent(newValue);\n                    else\n                        this.content = newValue;\n                }\n            },\n            readonly(value){\n                if(value){\n                    this.editor.setMode('readonly');\n                } else {\n                    this.editor.setMode('design');\n                }\n            }\n        },\n        methods: {\n            init(){\n                let options = {\n                    selector: '#' + this.id,\n                    skin: false,\n                    toolbar1: this.toolbar1,\n                    toolbar2: this.toolbar2,\n                    plugins: this.plugins,\n                    init_instance_callback : this.initEditor\n                };\n                tinymce.init(this.concatAssciativeArrays(options, this.other_options));\n            },\n            initEditor(editor) {\n                this.editor = editor;\n                editor.on('KeyUp', (e) => {\n                    this.submitNewContent();\n                });\n                editor.on('Change', (e) => {\n                    if(this.editor.getContent() !== this.value){\n                        this.submitNewContent();\n                    }\n                    this.$emit('editorChange', e);\n                });\n                editor.on('init', (e) => {\n                    editor.setContent(this.content);\n                    this.$emit('input', this.content);\n                });\n                if(this.readonly){\n                    this.editor.setMode('readonly');\n                } else {\n                    this.editor.setMode('design');\n                }\n\n                this.$emit('editorInit', editor);\n            },\n            concatAssciativeArrays(array1, array2){\n                if(array2.length === 0) return array1;\n                if(array1.length === 0) return array2;\n                let dest = [];\n                for ( let key in array1) dest[key] = array1[key];\n                for ( let key in array2) dest[key] = array2[key];\n                return dest;\n            },\n            submitNewContent(){\n                this.isTyping = true;\n                if(this.checkerTimeout !== null)\n                    clearTimeout(this.checkerTimeout);\n                    this.checkerTimeout = setTimeout(()=>{\n                        this.isTyping = false;\n                    }, 300);\n\n                this.$emit('input', this.editor.getContent());\n            }\n        }\n    }\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n</style>\n"],"sourceRoot":""}]}